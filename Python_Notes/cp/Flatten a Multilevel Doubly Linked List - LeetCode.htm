<https://leetcode.com/>

  * Explore <https://leetcode.com/explore/>
  * Problems <https://leetcode.com/problemset/all/>
  * Contest <https://leetcode.com/contest/>
  * Discuss <https://leetcode.com/discuss/>
  *
    Interview

  *
    Store

0 <https://leetcode.com/problems/longest-square-streak-in-an-array/>
avatar

Premium <https://leetcode.com/subscribe/?ref=&source=ot>

<https://leetcode.com/>

Description <https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/>

Solution <https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/solution/>

Discuss (999+) <https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/discuss/>

Submissions <https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/submissions/>
430. Flatten a Multilevel Doubly Linked List
Medium

5097

331

Add to List

Share

You are given a doubly linked list, which contains nodes that have a
next pointer, a previous pointer, and an additional *child pointer*.
This child pointer may or may not point to a separate doubly linked
list, also containing these special nodes. These child lists may have
one or more children of their own, and so on, to produce a *multilevel
data structure* as shown in the example below.

Given the |head| of the first level of the list, *flatten* the list so
that all the nodes appear in a single-level, doubly linked list. Let |
curr| be a node with a child list. The nodes in the child list should
appear *after* |curr| and *before* |curr.next| in the flattened list.

Return /the /|head|/of the flattened list. The nodes in the list must
have *all* of their child pointers set to /|null|.

 

*Example 1:*

*Input:* head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
*Output:* [1,2,3,7,8,11,12,9,10,4,5,6]
*Explanation:* The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

*Example 2:*

*Input:* head = [1,2,null,3]
*Output:* [1,3,2]
*Explanation:* The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

*Example 3:*

*Input:* head = []
*Output:* []
*Explanation:* There could be empty list in the input.

 

*Constraints:*

  * The number of Nodes will not exceed |1000|.
  * |1 <= Node.val <= 10^5 |

 

*How the multilevel linked list is represented in test cases:*

We use the multilevel linked list from *Example 1* above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]

To serialize all levels together, we will add nulls in each level to
signify no node connects to the upper node of the previous level. The
serialization becomes:

[1,    2,    3, 4, 5, 6, null]
             |
[null, null, 7,    8, 9, 10, null]
                   |
[            null, 11, 12, null]

Merging the serialization of each level and removing trailing nulls we
obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

Accepted
345,596
Submissions
570,598
Seen this question in a real interview before?
Yes

No

Companies

Related Topics

Linked List <https://leetcode.com/tag/linked-list/>Depth-First Search
<https://leetcode.com/tag/depth-first-search/>Doubly-Linked List
<https://leetcode.com/tag/doubly-linked-list/>
Similar Questions

Flatten Binary Tree to Linked List <https://leetcode.com/problems/
flatten-binary-tree-to-linked-list/>
Medium
Correct a Binary Tree <https://leetcode.com/problems/correct-a-binary-tree/>
Medium
Wrong Answer
Details <https://leetcode.com/submissions/detail/1436417092/>
Input
[1,2,3,4,5,6,null,null,null,7,8,null,null,11,12]
Output
The linked list [1,2,3,7,8,4,5,6] is not a valid doubly linked list.
Expected
[1,2,3,7,8,11,12,4,5,6]
Time Submitted
	
Status
	
Runtime
	
Memory
	
Language
10/28/2024 22:24	Wrong Answer <https://leetcode.com/submissions/
detail/1436417092/>	N/A	N/A	python3
10/28/2024 22:05	Wrong Answer <https://leetcode.com/submissions/
detail/1436396760/>	N/A	N/A	python3

Problems

Pick One

Prev

430/3367
Next

Select...
Python3
//
Autocomplete

x

 
1

class Solution:

2

    def recur_finder(self,head):

3

        if not head:

4

            return None,None

5

        cur = head

6

​

7

        while cur.next != None:

8

            if cur.child: 

9

                node = cur.child 

10

                cur.child = None

11

                start,tail = self.recur_finder(node)

12

                tail.next = cur.next

13

                cur.next.prev = tail

14

                cur.next = node

15

                node.prev = cur

16

                cur = tail

17

            cur = cur.next

18

        return head,cur

19

    

20

    def flatten(self, head: 'Optional[Node]') -> 'Optional[Node]':   

21

        head,tail = self.recur_finder(head) 

22

        return head

23

        

24

        

NEW
Console

Contribute

Run Code

Submit

/|

/
/|

/
/|

/

x

 

The linked list [1,2,3,7,8,11,12,9,10,4,5,6] is not a valid doubly linked list.

[1,2,3,4,5,6,null,null,null,7,8,null,null,11,12]

[1,null,2,null,3,null]

​

        if cur.next == None and cur.child:

            node = cur.child

            cur.child = None

            start,tail = self.recur_finder(node)

            cur.next = node

            node.prev = cur 

            

            return head,tail

Saved
Select...
All Problems
//

Select...
9
//

#401 Binary Watch
Easy
#402 Remove K Digits
Medium
#403 Frog Jump
Hard
#404 Sum of Left Leaves
Easy
#405 Convert a Number to Hexadecimal
Easy
#406 Queue Reconstruction by Height
Medium
#407 Trapping Rain Water II
Hard
#408 Valid Word Abbreviation
Easy
#409 Longest Palindrome
Easy
#410 Split Array Largest Sum
Hard
#411 Minimum Unique Word Abbreviation
Hard
#412 Fizz Buzz
Easy
#413 Arithmetic Slices
Medium
#414 Third Maximum Number
Easy
#415 Add Strings
Easy
#416 Partition Equal Subset Sum
Medium
#417 Pacific Atlantic Water Flow
Medium
#418 Sentence Screen Fitting
Medium
#419 Battleships in a Board
Medium
#420 Strong Password Checker
Hard
#421 Maximum XOR of Two Numbers in an Array
Medium
#422 Valid Word Square
Easy
#423 Reconstruct Original Digits from English
Medium
#424 Longest Repeating Character Replacement
Medium
#425 Word Squares
Hard
#426 Convert Binary Search Tree to Sorted Doubly Linked List
Medium
#427 Construct Quad Tree
Medium
#428 Serialize and Deserialize N-ary Tree
Hard
#429 N-ary Tree Level Order Traversal
Medium
#430 Flatten a Multilevel Doubly Linked List
Medium
#431 Encode N-ary Tree to Binary Tree
Hard
#432 All O`one Data Structure
Hard
#433 Minimum Genetic Mutation
Medium
#434 Number of Segments in a String
Easy
#435 Non-overlapping Intervals
Medium
#436 Find Right Interval
Medium
#437 Path Sum III
Medium
#438 Find All Anagrams in a String
Medium
#439 Ternary Expression Parser
Medium
#440 K-th Smallest in Lexicographical Order
Hard
#441 Arranging Coins
Easy
#442 Find All Duplicates in an Array
Medium
#443 String Compression
Medium
#444 Sequence Reconstruction
Medium
#445 Add Two Numbers II
Medium
#446 Arithmetic Slices II - Subsequence
Hard
#447 Number of Boomerangs
Medium
#448 Find All Numbers Disappeared in an Array
Easy
#449 Serialize and Deserialize BST
Medium
#450 Delete Node in a BST
Medium
Try new version
